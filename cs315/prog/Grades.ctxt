#BlueJ class context
comment0.target=class\ Grades
comment0.text=\nThis\ class\ reads\ in\ a\ set\ of\ grades\ from\ a\ file\ and\ stores\ it\ for\ each\ student.\ <BR>\nAlso\ computes\ various\ stats\ on\ the\ grades,\ like\ overall\ GPA,\ standard\ deviation,\ etc.\n@author\ michael\ king\ and\ michael\ fradkin\n@version\ 2.98.423.1\n\n
comment1.target=dMyPercentFs
comment1.text=captures\ percentage\ of\ Fs\ out\ of\ all\ grades\ \n
comment10.target=myMaxQuizValues
comment10.text=captures\ all\ quiz\ values\ into\ an\ array\ \n
comment11.target=dMyMaxScore
comment11.text=captures\ maximum\ score\ for\ all\ grades\ \n
comment12.target=dMyStandardDev2
comment12.text=captures\ percentage\ of\ grades\ within\ 2\ standard\ deviations\ \n
comment13.target=st
comment13.text=allows\ tokenizing\ of\ lines\ in\ the\ file\ \n
comment14.target=dMyStandardDev1
comment14.text=captures\ percentage\ of\ grades\ within\ 1\ standard\ deviation\ \n
comment15.target=iMyNumRecords
comment15.text=captures\ number\ of\ students\ in\ the\ file\ \n
comment16.params=
comment16.target=void\ setTotalProjectScore()
comment16.text=\nComputes\ and\ stores\ total\ project\ score,\ weighted.\ <BR>\npost\:\ project\ grade\ is\ computed\ on\ a\ 100\ point\ scale,\ accounting\ for\ weights.\ <BR>\ncomplexity\:\ Big\ O(N)\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n\n
comment17.target=lineTokens
comment17.text=allows\ for\ breaking\ up\ lines\ in\ a\ file\ \n
comment18.target=dMyTotalQuizTestScore
comment18.text=captures\ weighted\ average\ combination\ of\ quiz\ and\ test\ grades\ \n
comment19.target=dMyExtraCredit
comment19.text=captures\ value\ of\ a\ student's\ extra\ credit\ \n
comment2.params=
comment2.target=boolean\ isValid()
comment2.text=\nDetermines\ the\ invariant\ of\ the\ Grades\ class.\ <BR>\npre\:\ none.\ <BR>\npost\:\ Returns\ true\ if\ all\ checked\ data\ is\ valid.\ <BR>\ncomplexity\:\ Big\ O(N)\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n\n
comment20.target=myTA
comment20.text=captures\ student's\ TA's\ name\ \n
comment21.target=myQuizzes
comment21.text=captures\ all\ quiz\ grades\ for\ a\ student\ \n
comment22.target=iMySectionNum
comment22.text=captures\ student\ section\ number\ \n
comment23.target=cMyPlusMinus
comment23.text=stores\ if\ the\ student\ did\ extra\ credit\ (+)\ or\ was\ demoted\ (-)\ \n
comment24.target=myID
comment24.text=captures\ student\ ID\ \n
comment25.params=
comment25.target=void\ setTotalScore()
comment25.text=\nComputes\ and\ stores\ the\ overall\ grade\ for\ the\ student.\ <BR>\npost\:\ overall\ grade\ is\ computed\ and\ stored,\ accounting\ for\ extra\ credit.\ <BR>\ncomplexity\:\ Big\ O(1)\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n\n
comment26.params=
comment26.target=boolean\ isValid()
comment26.text=\nDetermines\ the\ invariant\ of\ the\ Student\ class.\ <BR>\npost\:\ returns\ the\ truth\ value\ of\ valid\ data.\ <BR>\ncomplexity\:\ Big\ O(N)\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n@return\ true\ if\ data\ is\ valid;\ false\ otherwise\n\n
comment27.params=
comment27.target=void\ setLetterGrade()
comment27.text=\nComputes\ letter\ grade\ for\ Student.\ <BR>\npost\:\ letter\ grade\ is\ determined,\ based\ on\ in-class\ and\ out-class\ components.\ <BR>\ncomplexity\:\ Big\ O(1)<BR>\nmemory\ usage\:\ Big\ O(1)<BR>\n\n
comment28.target=myProjects
comment28.text=captures\ all\ project\ grades\ for\ a\ student\ \n
comment29.params=numToFormat\ formatTo\ alignLeft
comment29.target=String\ append(String,int,boolean)
comment29.text=\nPrivate\ method\ to\ format\ the\ number\ for\ correct\ spacing\ in\ the\ table.\ <BR>\npre\:\ numToFormat\ instanceOf\ String\ <BR>\npost\:\ the\ parameter\ is\ returned\ with\ an\ appended\ number\ of\ spaces\ in\ front\ of\ it\ <BR>\nBig\ O\:\ O(N)\ <BR>\nMemory\ estimate\:\ Big\ O(N)\ <BR>\n@param\ numToFormat\ the\ string\ representation\ of\ the\ number\ to\ format\n@param\ formatTo\ the\ amount\ of\ space\ necessary\ before\ the\ number\ to\ align\ correctly\n@return\ the\ newly\ appended\ string\n\n
comment3.target=dMyMinScore
comment3.text=captures\ minimum\ score\ for\ all\ grades\ \n
comment30.target=cMyLetterGrade
comment30.text=captures\ the\ letter\ grade\ of\ a\ student\ \n
comment31.params=out
comment31.target=java.io.PrintWriter\ write(java.io.PrintWriter)
comment31.text=\nMethod\ to\ print\ out\ each\ students\ info\ <BR>\npost\:\ output\ is\ placed\ into\ the\ PrintWriter\ destination.\ <BR>\ncomplexity\:\ Big\ O(N)\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n@param\ out\ java.io.PrintWriter\ object\ specifies\ where\ to\ output\ the\ text\n@return\ the\ modified\ PrintWriter\ object\n\n
comment32.params=file
comment32.target=Student(ReadFile)
comment32.text=\nConstructor\ of\ Students\ <BR>\npre\:\ grades\ have\ been\ read\ in.\ <BR>\npost\:\ Student\ is\ initialized\ based\ on\ a\ file's\ grades.\ <BR>\ncomplexity\:\ Big\ O(N)\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n@param\ file\ a\ valid,\ opened\ file.\n@exception\ BadInputException\ if\ input\ in\ the\ file\ is\ not\ valid.\n\n
comment33.params=
comment33.target=Object\ clone()
comment33.text=\nCreates\ a\ deep\ copy\ of\ a\ Student\ object.\ <BR>\npre\:\ object\ implements\ Cloneable\ <BR>\npost\:\ deep\ copy\ of\ Student\ object\ is\ created\ and\ returned\ <BR>\ncomplexity\:\ Big\ O(1)\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n@return\ deep\ copy\ of\ Student\ object\ as\ Object\n\n
comment34.target=dMyTotalScore
comment34.text=captures\ a\ student's\ overall\ average\ \n
comment35.target=myTests
comment35.text=captures\ all\ test\ grades\ for\ a\ student\ \n
comment36.target=dMyTotalProjScore
comment36.text=captures\ average\ project\ grade,\ weighted\ \n
comment37.params=
comment37.target=void\ setTotalQuizTestScore()
comment37.text=\nComputes\ and\ stores\ combined\ quiz\ and\ test\ score,\ weighted.\ <BR>\npost\:\ combined\ quiz\ and\ test\ scores\ are\ computed\ on\ a\ 100\ point\ scale,\ accounting\ for\ weights.\ <BR>\ncomplexity\:\ Big\ O(N)\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n\n
comment38.target=iMyNumProjects
comment38.text=captures\ just\ number\ of\ projects\ \n
comment39.target=myQuizWeights
comment39.text=captures\ all\ quiz\ weights\ into\ an\ array\ \n
comment4.target=myTestWeights
comment4.text=captures\ all\ test\ weights\ into\ an\ array\ \n
comment40.target=dMyPercentBs
comment40.text=captures\ percentage\ of\ Bs\ out\ of\ all\ grades\ \n
comment41.params=
comment41.target=void\ setStandardDeviations()
comment41.text=\nSets\ the\ standard\ deviation\ for\ all\ the\ grades.\npre\:\ none\ <BR>\npost\:\ standard\ deviation,\ percentage\ of\ scores\ within\ 1\ and\ 2\ deviations\ is\ computed\ and\ stored.\ <BR>\ncomplexity\:\ Big\ O(N)\ <BR>\nmemory\ usage\:\ Big\ O(N)<BR>\n\n
comment42.params=
comment42.target=Object\ clone()
comment42.text=\nCreates\ a\ deep\ copy\ of\ a\ Grades\ object.\ <BR>\npre\:\ object\ implements\ Cloneable\ <BR>\npost\:\ deep\ copy\ of\ Grades\ object\ is\ created\ and\ returned\ <BR>\ncomplexity\:\ Big\ O(N)\ <BR>\nmemory\ usage\:\ Big\ O(N)\ <BR>\n@return\ deep\ copy\ of\ Grades\ object\ as\ Object\n\n
comment43.target=dMyStandardDev
comment43.text=captures\ standard\ deviation\ of\ all\ grades\ \n
comment44.params=file
comment44.target=Grades(ReadFile)
comment44.text=\nConstructor\ for\ Grades\ <BR>\npre\:\ a\ file\ has\ already\ been\ opened\ for\ reading.\ <BR>\npost\:\ grades\ for\ every\ student\ are\ imported\ from\ a\ file\ and\ stored.\ <BR>\ncomplexity\:\ Big\ O(N)\ <BR>\nmemory\ usage\:\ Big\ O(N)\ <BR>\n@param\ file\ is\ the\ object\ created\ from\ the\ input\ file\n@exception\ BadInputException\ if\ input\ is\ not\ valid.\n\n
comment45.target=dMyClassGPA
comment45.text=captures\ overall\ GPA\ out\ of\ all\ the\ grades\ \n
comment46.params=
comment46.target=void\ setMinMaxMeanScore()
comment46.text=\nComputes\ and\ stores\ the\ minimum,\ maximum,\ and\ average\ score.\ <BR>\npre\:\ grades\ have\ already\ been\ computed.\ <BR>\npost\:\ minimum,\ maximum\ value\ is\ found\ and\ stored.\ average\ score\ is\ computed.\ <BR>\ncomplexity\:\ Big\ O(N)\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n\n
comment47.target=myProjWeights
comment47.text=captures\ all\ project\ weights\ into\ an\ array\ \n
comment48.target=allMyValues
comment48.text=captures\ all\ of\ the\ values\ of\ quizzes,\ tests,\ and\ projects\ into\ a\ single\ string\ \n
comment49.target=dMyPercentAs
comment49.text=captures\ percentage\ of\ As\ out\ of\ all\ grades\ \n
comment5.params=
comment5.target=void\ setPercentLetterGrades()
comment5.text=\nComputes\ and\ stores\ percentages\ of\ As,\ Bs,\ Cs,\ Ds,\ and\ Fs.\ <BR>\npre\:\ letter\ grades\ for\ each\ student\ have\ already\ been\ computed.\ <BR>\npost\:\ percentages\ of\ each\ grade\ are\ calculated\ and\ stored.\ <BR>\ncomplexity\:\ Big\ O(N)\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n\n
comment50.target=myStudents
comment50.text=holds\ data\ for\ every\ student\ in\ the\ file\ \n
comment51.target=dMyPercentDs
comment51.text=captures\ percentage\ of\ Ds\ out\ of\ all\ grades\ \n
comment52.params=numToFormat\ formatTo
comment52.target=String\ append(String,int)
comment52.text=\nPrivate\ method\ to\ format\ the\ number\ for\ correct\ spacing\ in\ the\ table.\ <BR>\npre\:\ numToFormat\ instanceOf\ String\ <BR>\npost\:\ the\ parameter\ is\ returned\ with\ an\ appended\ number\ of\ spaces\ in\ front\ of\ it\ <BR>\nBig\ O\:\ O(N)\ <BR>\nMemory\ estimate\:\ Big\ O(N)\ <BR>\n@param\ numToFormat\ the\ string\ representation\ of\ the\ number\ to\ format\n@param\ formatTo\ the\ amount\ of\ space\ necessary\ before\ the\ number\ to\ align\ correctly\n@return\ the\ newly\ appended\ string\n\n
comment53.target=myMaxTestValues
comment53.text=captures\ all\ test\ values\ into\ an\ array\ \n
comment54.params=out
comment54.target=java.io.PrintWriter\ printHeader(java.io.PrintWriter)
comment54.text=\nMethod\ to\ print\ out\ the\ header\ for\ subsections\ of\ students.\ <BR>\npost\:\ header\ is\ printed\ out\ <BR>\ncomplexity\:\ Big\ O(1)\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n@param\ out\ java.io.PrintWriter\ object\ specifies\ where\ to\ output\ the\ text\n@return\ the\ modified\ PrintWriter\ object\n\n
comment55.params=out
comment55.target=java.io.PrintWriter\ writeBySection(java.io.PrintWriter)
comment55.text=\nMethod\ to\ print\ out\ sorted\ by\ section\ number,\ then\ ID.\ <BR>\npost\:\ output\ is\ placed\ into\ the\ PrintWriter\ destination.\ <BR>\ncomplexity\:\ Big\ O(N)\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n@param\ out\ java.io.PrintWriter\ object\ specifies\ where\ to\ output\ the\ text\n@return\ the\ modified\ PrintWriter\ object\n\n
comment56.params=out
comment56.target=java.io.PrintWriter\ writeByLetter(java.io.PrintWriter)
comment56.text=\nMethod\ to\ print\ out\ sorted\ by\ letter\ grade,\ total\ score,\ then\ ID.\ <BR>\npost\:\ output\ is\ placed\ into\ the\ PrintWriter\ destination.\ <BR>\ncomplexity\:\ Big\ O(N)\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n@param\ out\ java.io.PrintWriter\ object\ specifies\ where\ to\ output\ the\ text\n@return\ the\ modified\ PrintWriter\ object\n\n
comment57.params=s1\ s2
comment57.target=int\ compare(Object,Object)
comment57.text=\nMethod\ to\ compare\ based\ on\ letter\ grade,\ total\ score,\ then\ ID.\ <BR>\npre\:\ Objects\ are\ instanceof\ Student\ <BR>\npost\:\ If\ sorted\ using\ this\ comparator,\ the\ array\ will\ be\ modified\ accordingly.\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n@param\ s1\ Student\ object\n@param\ s2\ Student\ object\n@return\ the\ number\ if\ one\ is\ less\ than\ the\ other,\ 0\ if\ equal,\ otherwise\ a\ positive\ number\n\n
comment58.target=allMyWeights
comment58.text=captures\ all\ the\ weights\ of\ quizzes,\ tests,\ and\ projects\ into\ a\ single\ string\ \n
comment59.params=
comment59.target=void\ setClassGPA()
comment59.text=\nComputes\ and\ stores\ the\ overall\ class\ GPA\ <BR>\npre\:\ letter\ grades\ for\ each\ student\ have\ already\ been\ computed.\ <BR>\npost\:\ class\ GPA\ is\ calculated\ and\ stored.\ <BR>\ncomplexity\:\ Big\ O(N)\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n\n
comment6.target=iMyNumQuizzes
comment6.text=captures\ just\ number\ of\ quizzes\ \n
comment60.params=s1\ s2
comment60.target=int\ compare(Object,Object)
comment60.text=\nMethod\ to\ compare\ based\ on\ section\ number,\ then\ ID\ <BR>\npre\:\ Objects\ are\ instanceof\ Student\ <BR>\npost\:\ If\ sorted\ using\ this\ comparator,\ the\ array\ will\ be\ modified\ accordingly.\ <BR>\nmemory\ usage\:\ Big\ O(1)\ <BR>\n@param\ s1\ Student\ object\n@param\ s2\ Student\ object\n@return\ the\ number\ if\ one\ is\ less\ than\ the\ other,\ 0\ if\ equal,\ otherwise\ a\ positive\ number\n\n
comment61.target=allMyNumbers
comment61.text=captures\ all\ the\ numbers\ of\ quizzes,\ tests,\ and\ projects\ into\ a\ single\ string\ \n
comment62.target=dMyPercentCs
comment62.text=captures\ percentage\ of\ Cs\ out\ of\ all\ grades\ \n
comment7.target=iMyNumTests
comment7.text=captures\ just\ number\ of\ tests\ \n
comment8.target=myMaxProjValues
comment8.text=captures\ all\ project\ values\ into\ an\ array\ \n
comment9.target=dMyMeanScore
comment9.text=captures\ average\ score\ for\ all\ grades\ \n
numComments=63
